<% content_for :crumb do %>
	<li><%= link_to("All domains", domains_url()) %> </li>
	<li><%= link_to("#{@domain.name.to_s.capitalize} details", domain_url(@domain)) %> </li>
	<li><%= @service.name.to_s.capitalize%> details </li>
<% end %>

<h1>Service: <%=@domain.name%>::<%= @service.name %></h1>
<p><%= status_to_icon(@service.status) %></p>
 <p>Nunc sit amet nunc. Curabitur accumsan. Sed ac dui et nunc bibendum ultricies. Duis felis odio, egestas vitae, rhoncus sed, luctus dapibus, eros. Proin placerat luctus lorem. Ut mi justo, malesuada at, mattis nec, rutrum commodo, odio. Curabitur feugiat mi vel mi.</p>

 <div id='pane'>
 <div id='operations'>
	<h3>Service Operations</h3>
	 <%= method_list(%w{start() stop() restart()}, "methods", "runnable")%>		
 </div>
 <br />
  <h2>Available methods</h2>
  <div id='methods_section'>
	 <h3>Exposed</h3>	
	 <%= method_list(@service.methods[:exposed], "methods", "runnable")%>

	 <h3>Found</h3>	
	 <%= method_list(@service.methods[:all], "methods")%>
	</div>
	<br />
	 <h2>Available variables</h2>	
	<div id='var_section'>
	 <h3>Read & write</h3>
	 <%= var_list(@service.variables[:both], "variables", "rw")%>

	 <h3>Write only</h3>	
	 <%= var_list(@service.variables[:write], "variables", "w")%>

	 <h3>Read only</h3>		
	 <%= var_list(@service.variables[:read], "variables")%>
  </div>
</div>


<% # Create The accordions
content_for :javascript do 
%>
$(function() {
	$("#methods_section").accordion({collapsible: true, active: -1 });
	$("#var_section").accordion({collapsible: true, active: -1 });
	$("#operations").accordion({collapsible: true, active: -1 });	
	
	$(".runnable_method").click(invoke_handler);
});
<%end%>

<% # Make the variables clickable to invoke the setter
content_for :javascript do 
%>
var group = "span.variable_value span, span.variable_value span input"
$(function() {
	$("span.variable_value span").click(to_input);
});

// Convert the value inside an span into an input box
function to_input() {
	value = $(this).html();
	
	if(value =="-----") value = ""; 
	$(this).html("<input type='text' value='"+value+"' \>");
	
	$(group).unbind("click", to_input)
			.focus();
	
	e = this;
	$(this).children("input").blur(function() {		
		to_text(e) 
	});
	$(this).next().show("puff", {}, 500);
}

// Convert the input box back to a span
function to_text(self) {
	if (self == null) self = this;
	
	value = $(self).children("input").val()
	
	if(value=="") value ="-----";
	$(self).html(value);	
	
	$(group).click(to_input);		
	
	$(self).next().hide("puff", {}, 500);
}

// this function will be scoped by jQuery, so this refers to the element clicked on
function invoke_handler() {
	self 		= $(this);
	in_method	=  self.parent().parent().children("span").next().html();
	
	self.show("pulsate", { times:25 }, 500);
	$.ajax({
	  type				: "GET",
	  url				: window.location.href+"/invoke",
	  data 				: ({method: in_method}),
	  dataType			: "html",
	  success			: function(data, status) {	
		if(data.match(/^error;/i)) {
			report("<b>Error invoking "+in_method+"!</b><br />Results:<span class='result'>"+data.replace(/error\;(.+?$)/i, "$1")+"</span>", "error")
		} else {
			report("<b>Succesfully invoked "+in_method+"!</b><br />Results:<span class='result'>"+data+"</span>", "success")			
		}
			
	  },
	  error				: function(XMLHttpRequest, textStatus, errorThrown) {
		report("<b>Error invoking "+in_method+"!</b><br />Results:<span class='result'>"+XMLHttpRequest.responseText+"</span>", "error")
	  },
	  complete 			: function() {
		self.stop(true, true).show("pulsate", { times:1 }, 1);
	  }
	});
}

// Simple function to report the received message
function report(what, type) {
	var type = (type) ? type.toLowerCase() : "notice"	
	if($("#js_report_"+type).size()>0) $("#js_report_"+type).remove()
	
	$("#content").children(":first").before("<div id='js_report_"+type+"' class='"+type+"'>"+what+"</div>");
	$("#js_report_"+type).show("blind", { direction: "vertical" }, 1000)
						 .show("pulsate", {times: 2});

	window.setTimeout(function(){$("#js_report_"+type).hide("blind", {direction: "vertical"}, 1000);}, 5000)
}
<%end%>
